<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Bojan Veljanovski's notes and thoughts on software</title><link>http://bojanv91.github.io/rss.xml</link><description>Bojan Veljanovski's notes and thoughts on software</description><item><guid isPermaLink="true">http://bojanv91.github.io/2016/05/feature-folders-structure-in-asp-net/</guid><link>http://bojanv91.github.io/2016/05/feature-folders-structure-in-asp-net/</link><title>"Feature Folders" structure in ASP.NET MVC</title><description>&lt;p&gt;Structuring files around &lt;strong&gt;business concerns&lt;/strong&gt; is more convenient and natural way of handling projects than structuring them around &lt;strong&gt;technical concerns&lt;/strong&gt;. The &lt;a href="http://deviq.com/separation-of-concerns/"&gt;Separation of Concerns&lt;/a&gt; is applied in both approaches, not both of them gives the same desired clarity and ease of handling a project. This article focuses on which structure gives better results.</description><pubDate>Thu, 26 May 2016 22:00:00 Z</pubDate><a10:updated>2016-05-26T22:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Structuring files around &lt;strong&gt;business concerns&lt;/strong&gt; is more convenient and natural way of handling projects than structuring them around &lt;strong&gt;technical concerns&lt;/strong&gt;. The &lt;a href="http://deviq.com/separation-of-concerns/"&gt;Separation of Concerns&lt;/a&gt; is applied in both approaches, not both of them gives the same desired clarity and ease of handling a project. This article focuses on which structure gives better results.&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;p&gt;Let's think about how do project managers usually request changes in requirements ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change these fields in all these views; all these models; all these controllers, or&lt;/li&gt;
&lt;li&gt;Change these fields in customer registration; shopping cart payment; ...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the time developers make modifications related to a single feature (e.g. adding new field). Structuring folders around interrelated files can make modification process simpler. The default MVC folder structure violates the rule of &lt;em&gt;"Files that change together should be structured close together"&lt;/em&gt;. Structuring by business concerns embraces this important rule.&lt;/p&gt;

&lt;p&gt;Let's see both approaches in examples. &lt;/p&gt;

&lt;h1&gt;Structuring files by technical concerns (horizontal)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Controllers
    CustomersController.cs
    OrdersController.cs
    ShoppingCartController.cs
    ProductsController.cs
    ...
Models
    CustomersEditModel.cs
    CustomersIndexModel.cs
    CustomersLoginModel.cs
    CustomersRegisterModel.cs
    OrdersDetailsModel.cs
    OrdersIndexModel.cs
    ShoppingCartCustomerDetails.cs
    ShoppingCartIndex.cs
    ShoppingCartOrdersList.cs
    ShoppingCartPaymentDetails.cs
    ...
Views
    Customers
        Edit.cshtml
        Index.cshtml
        Login.cshtml
        Register.cshtml
    Orders
        Details.cshtml
        Index.cshtml
    ShoppingCart
        _MiniCart.cshtml
        CustomerDetails.cshtml
        Index.cshtml
        OrdersList.cshtml
        PaymentDetails.cshtml
    Products
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, imagine you have many-many controllers, in addition to the standard N-Layer stuff like repositories, services, DTOs, etc... You will soon notice that things are starting to get messy.&lt;/p&gt;

&lt;h1&gt;Structuring files by business concerns (vertical)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Features
    Customers
        CustomersController.cs
        Edit.cs
        Edit.cshtml
        Index.cs
        Index.cshtml
        Login.cs
        Login.cshtml       
        Register.cs         
        Register.cshtml
    Orders
        Details.cs
        Details.cshtml
        Index.cs
        Index.cshtml
        OrdersController.cs
    ShoppingCart
        _MiniCart.cshtml
        CustomerDetails.cs
        CustomerDetails.cshtml
        Index.cs
        Index.cshtml
        OrdersList.cs
        OrdersList.cshtml
        PaymentDetails.cs
        PaymentDetails.cshtml
        ShoppingCartController.cs
    Products
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Visual Studio this looks like following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2016-05-27-feature-folders-structure-in-asp-net/image01.png" alt="Feature Folders example in ASP.NET MVC" /&gt;&lt;/p&gt;

&lt;p&gt;Food for thought:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What if we put our JavaScript files also in these feature folders?&lt;/li&gt;
&lt;li&gt;What if one feature folder becomes so demanding on the UI that needs to be a full SPA view/module - can we structure it to use Angular (or React, or whatever)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of single feature evolved as Angular application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ShoppingCart
    Components
        CartComponent.js
        CartComponent.css
        PaymentComponent.js
        PaymentComponent.css
        CartContainer.js
    App.js
    App.css
    Index.cshtml
    ShoppingCartController.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Configuration&lt;/h1&gt;

&lt;p&gt;To make this work in ASP.NET MVC, the default Razor view engine should be replaced with one that makes the distincion of feature folders.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Global : HttpApplication
{
    void Application_Start(object sender, EventArgs e)
    {
        // ...
        ViewEngines.Engines.Clear();
        ViewEngines.Engines.Add(new FeatureFoldersRazorViewEngine());
    }
}

public class FeatureFoldersRazorViewEngine : RazorViewEngine
{
    public FeatureFoldersRazorViewEngine()
    {
        var featureFolderViewLocationFormats = new[]
        {
            "~/Features/{1}/{0}.cshtml",
            "~/Features/{1}/{0}.vbhtml",
            "~/Features/Shared/{0}.cshtml",
            "~/Features/Shared/{0}.vbhtml",
        };

        ViewLocationFormats = featureFolderViewLocationFormats;
        MasterLocationFormats = featureFolderViewLocationFormats;
        PartialViewLocationFormats = featureFolderViewLocationFormats;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Summary&lt;/h1&gt;

&lt;p&gt;Structuring files by features (business concerns) makes things easier to find and manage. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't step over each other toes with your peers, thus, avoid spending time on fixing merge conflicts. &lt;/li&gt;
&lt;li&gt;You can scale and modify each feature on its own, independently from other features.&lt;/li&gt;
&lt;li&gt;You immediately understand what an application does and where to find necessary files for your given requirement.&lt;/li&gt;
&lt;li&gt;You can easily reuse similar features across projects by simply copying a single folder.&lt;/li&gt;
&lt;li&gt;Time spent on navigation through Solution Explorer to locate interdependent files is drastically reduced since they are all in a single folder. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At our company, we have been using structuring around business concerns on over dozens of projects for more than a year, and due to the high success and productivity boost in our teams, it became our default structure on the presentation layer. But, you may ask - how do we structure our application services and data access? Stay tuned...&lt;/p&gt;

&lt;p&gt;Happy coding!  &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://bojanv91.github.io/2015/09/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/</guid><link>http://bojanv91.github.io/2015/09/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/</link><title>Towards Good Enough Code: Re-factoring a business rule check with the Specification Pattern</title><description>&lt;p&gt;The other day, one of my colleges asked me for code review on a specific part of code and I said let's dig a little deeper into the options that we have. In this article, I demonstrate the re-factoring steps in detail that we've taken and eventually how we employed the &lt;code&gt;Specification Pattern&lt;/code&gt; </description><pubDate>Mon, 28 Sep 2015 22:00:00 Z</pubDate><a10:updated>2015-09-28T22:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;The other day, one of my colleges asked me for code review on a specific part of code and I said let's dig a little deeper into the options that we have. In this article, I demonstrate the re-factoring steps in detail that we've taken and eventually how we employed the &lt;code&gt;Specification Pattern&lt;/code&gt; &lt;!--excerpt--&gt;. Have in mind that, I choose a very basic example in order to keep things simple and avoid confusion that can be arouse from domain complexity.&lt;/p&gt;

&lt;p&gt;Here is the original code:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//..

var newCompany = new Company(message.Name, message.CountryId);

// Query all companies from database 
var companies = _companyRepository.Query().ToList();
// Check if the newly created company is unique
if (companies.Any(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId))
    throw new Exception("A company with the same name and country already exists");

session.Save(newCompany);
//..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we can see a few problems. First, all companies are queried from the database, and that can create performance issues. Another problem is too much operations happening in the &lt;code&gt;If&lt;/code&gt; check line; thus, the lengthy line is making the code harder to read. And, the final problem is very plain practice of &lt;code&gt;Exception&lt;/code&gt; throwing. Although, I like expressing explicit guard checks, that code can be better. Let's tackle these problems, one by one, in a few steps along this article and provide some improvement suggestions.&lt;/p&gt;

&lt;p&gt;Also, I provide here the &lt;code&gt;tl;dr;&lt;/code&gt; version of the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//..

var newCompany = new Company(message.Name, message.CountryId);

var spec = new UniqueCompanySpecification(_companyRepository);
if (spec.IsSatisfiedBy(newCompany) == false)
    throw new CompanyAlreadyExistsException();

session.Save(newCompany);
//..
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;How we get there?&lt;/h1&gt;

&lt;h2&gt;Step 1 - Solve The Query Performance Issues&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var numberOfSameCompanies = _companyRepository.Query()
    .Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
    .Count();
if (numberOfSameCompanies &amp;gt; 0)
    throw new Exception("A company with the same name and country already exists");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query above retrieves the number of companies satisfying the given &lt;code&gt;where&lt;/code&gt; condition. Performance issues have been solved.&lt;/p&gt;

&lt;h2&gt;Step 2 - Make The &lt;code&gt;if&lt;/code&gt; Condition Check Explicit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var numberOfSameCompanies = _companyRepository.Query()
    .Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
    .Count();
var doesCompanyAlreadyExists = numberOfSameCompanies &amp;gt; 0;
if (doesCompanyAlreadyExists)
    throw new Exception("A company with the same name and country already exists");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting some explicit conditions, we gain clear understanding of what the code does.&lt;/p&gt;

&lt;h2&gt;Step 3 - Make The Business Rule Violation Explicit&lt;/h2&gt;

&lt;p&gt;Original:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw new Exception("A company with the same name and country already exists");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-factored to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw new CompanyAlreadyExistsException();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the implementation of the exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CompanyAlreadyExistsException : Exception
{
    CompanyAlreadyExistsException () 
      :base("A company with the same name and country already exists")
    { 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, it looks better. Anyway, we have still room for improvements.&lt;/p&gt;

&lt;h2&gt;Step 4 - Encapsulate The Business Rule Check By Employing 'The Specification Pattern'&lt;/h2&gt;

&lt;p&gt;The 'Specification Pattern' is a tactical design pattern presented in Eric Evans’ book Domain Driven Design. The &lt;code&gt;Specification Pattern&lt;/code&gt; is a way of encapsulating business rule(s) and testing it against a candidate object to see if that object satisfies all requirements expressed in a specification. This pattern fits very good with the Single-Responsibility-Principle (SRP), which states that one class should have only one reason to change. Furthermore, this specification object can be easily unit tested and reused.  &lt;/p&gt;

&lt;p&gt;Here, you can see how it is used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var spec = new UniqueCompanySpecification(_companyRepository);
if (spec.IsSatisfiedBy(newCompany) == false)
    throw new CompanyAlreadyExistsException();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the implementation details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UniqueCompanySpecification : ISpecification&amp;lt;Company&amp;gt;
{
    readonly ICompanyRepository _companyRepository;

    public UniqueCompanySpecification(ICompanyRepository companyRepository)
    {
        _companyRepository = companyRepository;
    }

    public bool IsSatisfiedBy(Company candidate)
    {
        var numberOfSameCompanies = _companyRepository.Query()
            .Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
            .Count();
        bool isUnique = numberOfSameCompanies == 0;
        return isUnique;
    }
}

public interface ISpecification&amp;lt;T&amp;gt;
{
    bool IsSatisfiedBy(T candidate);
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all re-factoring steps, the final code is as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//..

var newCompany = new Company(message.Name, message.CountryId);

var spec = new UniqueCompanySpecification(_companyRepository);
if (spec.IsSatisfiedBy(newCompany) == false)
    throw new CompanyAlreadyExistsException();

session.Save(newCompany);
//..
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this article, I've shown a re-factoring process and usage of the Specification Pattern in order to satisfy an explicit business rule.&lt;br /&gt;
The re-factoring steps we took:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Solve the query performance issues&lt;/li&gt;
&lt;li&gt;Make the &lt;code&gt;if&lt;/code&gt; condition check explicit&lt;/li&gt;
&lt;li&gt;Make the business rule violation explicit&lt;/li&gt;
&lt;li&gt;Encapsulate the business rule check by employing the Specification Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Specification Pattern lets you decouple the design of requirements, fulfillment, and validation. It also allows you to make your system definitions more clear and declarative, but be careful not to fall into temptation to over-use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/apsupp/spec.pdf"&gt;Specification Pattern by Eric Evans and Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Specification_pattern"&gt;https://en.wikipedia.org/wiki/Specification_pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215"&gt;Book: Domain Driven Design, Tackling Complexity In The Hearth of Software - by Eric Evans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://bojanv91.github.io/2015/03/beginners-installation-guide-to-bower-on-windows/</guid><link>http://bojanv91.github.io/2015/03/beginners-installation-guide-to-bower-on-windows/</link><title>Beginners installation guide to Bower on Windows</title><description>&lt;p&gt;&lt;a href="http://www.bower.io/"&gt;Bower&lt;/a&gt; is a package manger for the web. It makes installing frameworks, libraries and assets easy and straightforward. Automatically resolves package dependencies to other packages. For example, if you install twitter-bootstrap it would automatically install jquery for you, because bootstrap is dependent on jquery. Additionally it gives you version control out of the box for your packages, thus easier installing of updates. So, here is step-by-step guide into installing Bower and prerequisites on Windows. </description><pubDate>Sat, 21 Mar 2015 23:00:00 Z</pubDate><a10:updated>2015-03-21T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://www.bower.io/"&gt;Bower&lt;/a&gt; is a package manger for the web. It makes installing frameworks, libraries and assets easy and straightforward. Automatically resolves package dependencies to other packages. For example, if you install twitter-bootstrap it would automatically install jquery for you, because bootstrap is dependent on jquery. Additionally it gives you version control out of the box for your packages, thus easier installing of updates. So, here is step-by-step guide into installing Bower and prerequisites on Windows. &lt;!--excerpt--&gt; &lt;/p&gt;

&lt;p&gt;Bower installs all packages under a single folder called bower_components, and holds dependency information in a bower.json file (among other project information).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2015-03-22-beginners-installation-guide-to-bower-on-windows/Screenshot_1.png" alt="bower initial folder structure" /&gt;&lt;/p&gt;

&lt;p&gt;Bower depends on NPM and GIT, so you have to install them first.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recommendation: Working with Bower is done via command line tool. So, I recommend installing more advanced command line utility in order to get happier with some neat features, as &lt;a href="http://www.hanselman.com/blog/Console2ABetterWindowsCommandPrompt.aspx"&gt;Scott Hanselman blogged about Console2&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;Installing Bower and it's prerequisites&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open CMD&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Chocolatey&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command "(iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))) &amp;gt;$null 2&amp;gt;&amp;amp;1" &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install GIT (or &lt;a href="http://git-scm.com/downloads"&gt;http://git-scm.com/downloads&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install git.install 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wait until installation is finished  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx path "%path%;C:\Program Files (x86)\Git\bin\"
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install NodeJS (or &lt;a href="https://nodejs.org/download/"&gt;https://nodejs.org/download/&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install nodejs.install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wait until installation is finished&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx path "%path%;C:\Program Files\nodejs\"
setx path "%path%;C:\Users\%username%\AppData\Roaming\npm"
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm install -g bower&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything went fine you should be able to user "bower" command in CMD.&lt;/p&gt;

&lt;p&gt;FAQ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is Chocolatey?&lt;br /&gt;
Chocolatey is a Machine Package Manager, somewhat like apt-get, but built with Windows in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is NodeJS?&lt;br /&gt;
Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is NPM (Node Package Manager)?&lt;br /&gt;
NPM is a package manager for JavaScript, and is the default for Node.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is NuGet?&lt;br /&gt;
NuGet is package manager for Microsoft development platform including .NET&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is PATH?&lt;br /&gt;
PATH is an environment variable on Unix-like operating systems, DOS, OS/2, and Microsoft Windows, specifying a set of directories where executable programs are located. In our case, we added the locations of GIT and NPM executables in PATH env variable in order to be able to use them directly in CMD.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From where bower downloads packages?&lt;br /&gt;
bower install jquery (from registered packages in bower repository)&lt;br /&gt;
bower install git://github.com/user/package.git (from GitHub)&lt;br /&gt;
bower install user/package (from GitHub - with shorthand syntax)  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the simplest way in order to make my custom package publicly available via Bower?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Include bower.json manifest in the root folder&lt;/li&gt;
&lt;li&gt;Push it to GitHub repository&lt;/li&gt;
&lt;li&gt;Profit!  &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having more questions, you can reach me out on twitter @bojanv91 &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://bojanv91.github.io/2015/01/getting-started-with-rhino-security-structuremap/</guid><link>http://bojanv91.github.io/2015/01/getting-started-with-rhino-security-structuremap/</link><title>Getting Started with Rhino Security and Structure Map</title><description>&lt;p&gt;In this posting I will show you how to configure Rhino Security infrastructure to work with StructureMap IoC container and provide to you database schema (for MSSQL and &lt;a href="http://bojanv91.github.io/2014/12/database-development-guidance/"&gt;FluentMigrator&lt;/a&gt;) that you will need in order Rhino Security to get working. I've struggled some time before I got everything working, so here are my results. :) </description><pubDate>Sat, 10 Jan 2015 23:00:00 Z</pubDate><a10:updated>2015-01-10T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In this posting I will show you how to configure Rhino Security infrastructure to work with StructureMap IoC container and provide to you database schema (for MSSQL and &lt;a href="http://bojanv91.github.io/2014/12/database-development-guidance/"&gt;FluentMigrator&lt;/a&gt;) that you will need in order Rhino Security to get working. I've struggled some time before I got everything working, so here are my results. :) &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://github.com/ayende/rhino-security"&gt;Rhino Security&lt;/a&gt; is a security framework to provide row level security for NHibernate. Rhino Security is perfect for people who want to set up user and group security in their NHibernate domain models. &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;&lt;a href="https://github.com/ayende/rhino-security"&gt;Rhino Security GitHub repository&lt;/a&gt;  &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;More details about the architecture and how Rhino Security works behind the scenes can be found &lt;a href="http://ayende.com/blog/2958/a-vision-of-enterprise-platform-security-infrastructure"&gt;here&lt;/a&gt;, &lt;a href="http://ayende.com/blog/3109/rhino-security-overview-part-i"&gt;here&lt;/a&gt; and &lt;a href="http://ayende.com/blog/3113/rhino-security-part-ii-discussing-the-implementation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Action Plan&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Installing NuGet packages&lt;/li&gt;
&lt;li&gt;Configuring StructureMap container and registering Rhino.Security into NHibernate &lt;/li&gt;
&lt;li&gt;Implementing CommonServiceLocator provider for StructureMap&lt;/li&gt;
&lt;li&gt;User entity that implements Rhino.Security.IUser interface&lt;/li&gt;
&lt;li&gt;Preparing the database schema&lt;/li&gt;
&lt;li&gt;Usage DEMO (code samples &lt;a href="https://github.com/bojanv91/RhinoSecurityWithStructureMap"&gt;https://github.com/bojanv91/RhinoSecurityWithStructureMap&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-01.png" alt="Getting started with Rhino Security and StructureMap" /&gt;&lt;/p&gt;

&lt;h2&gt;Installing NuGet packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Install-Package Rhino.Security          
Install-Package NHibernate
Install-Package FluentNHibernate
Install-Package StructureMap
Install-Package CommonServiceLocator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FluentNHibernate provides fluent mapping interface for mapping our domain model entities to table structures via NHibernate.&lt;br /&gt;
CommonServiceLocator provides abstraction over IoC containers and service locators and contains a shared interface for service location. Rhino Security makes use of it, that is why can be used with any IoC container. &lt;/p&gt;

&lt;h2&gt;Configuring StructureMap container and registering Rhino.Security into NHibernate&lt;/h2&gt;

&lt;p&gt;In the following code snippet I have all configuration stuff in one class, called the Bootstrapper. It's purpose is to provide functionality for booting up our application, the starting point. Explanations about what does what are put in comments. If something is still unclear do write me a comment, I'll happily update that part. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Context;
using Rhino.Security.Interfaces;
using Rhino.Security.Services;

namespace RhinoSecurityWithStructureMap
{
    public class Bootstrapper
    {
        public static void Bootstrap(string connectionString)
        {
            var container = new StructureMap.Container();
            container.Configure(cfg =&amp;gt;
                {
                    //NHibernate configurations 
                    cfg.For&amp;lt;ISessionFactory&amp;gt;().Singleton().Use(() =&amp;gt; CreateSessionFactory(connectionString));
                    cfg.For&amp;lt;ISession&amp;gt;().Use(context =&amp;gt; GetSession(context));

                    //Rhino Security configurations 
                    cfg.For&amp;lt;IAuthorizationService&amp;gt;().Use&amp;lt;AuthorizationService&amp;gt;();
                    cfg.For&amp;lt;IAuthorizationRepository&amp;gt;().Use&amp;lt;AuthorizationRepository&amp;gt;();
                    cfg.For&amp;lt;IPermissionsBuilderService&amp;gt;().Use&amp;lt;PermissionsBuilderService&amp;gt;();
                    cfg.For&amp;lt;IPermissionsService&amp;gt;().Use&amp;lt;PermissionsService&amp;gt;();
                });

            //Setting up StuctureMapServiceLocator as a CommonServiceLocator that Rhino.Security will use for DI
            Microsoft.Practices.ServiceLocation.ServiceLocator
                .SetLocatorProvider(() =&amp;gt; new StructureMapServiceLocator(container));
        }

        private static ISessionFactory CreateSessionFactory(string connectionString)
        {
            FluentConfiguration fluentConfig = Fluently.Configure()
                .Database(MsSqlConfiguration.MsSql2012.ConnectionString(connectionString))          //specifying connection string for Microsoft SQL Server 2012 
                .Mappings(m =&amp;gt; m.FluentMappings.AddFromAssemblyOf&amp;lt;Bootstrapper&amp;gt;())                  //specifying in which assembly NHibernate should look for entity mappings
                .CurrentSessionContext(typeof(ThreadStaticSessionContext).AssemblyQualifiedName)    //specifying the session context lifecycle to be initialized per thread
                .ExposeConfiguration(cfg =&amp;gt;
                {
                    Rhino.Security.Security.Configure&amp;lt;User&amp;gt;(cfg, Rhino.Security.SecurityTableStructure.Prefix);
                });

            return fluentConfig.BuildSessionFactory();
        }

        private static ISession GetSession(StructureMap.IContext context)
        {
            var sessionFactory = context.GetInstance&amp;lt;ISessionFactory&amp;gt;();
            return sessionFactory.GetCurrentSession();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Implementing CommonServiceLocator provider for StructureMap&lt;/h2&gt;

&lt;p&gt;The code is pretty much straightforward. We just implement Microsoft.Practices.ServiceLocation.IServiceLocator interface with the common code that is provided to us by StructureMap IContainer interface, basically this class acts as a wrapper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StructureMapServiceLocator : Microsoft.Practices.ServiceLocation.IServiceLocator
{
    private readonly IContainer _container;

    public StructureMapServiceLocator(IContainer container)
    {
        _container = container;
    }

    public IEnumerable&amp;lt;TService&amp;gt; GetAllInstances&amp;lt;TService&amp;gt;()
    {
        return _container.GetAllInstances&amp;lt;TService&amp;gt;();
    }

    public IEnumerable&amp;lt;object&amp;gt; GetAllInstances(Type serviceType)
    {
        return (IEnumerable&amp;lt;object&amp;gt;)_container.GetAllInstances(serviceType);
    }

    public TService GetInstance&amp;lt;TService&amp;gt;(string key)
    {
        return _container.GetInstance&amp;lt;TService&amp;gt;(key);
    }

    public TService GetInstance&amp;lt;TService&amp;gt;()
    {
        return _container.GetInstance&amp;lt;TService&amp;gt;();
    }

    public object GetInstance(Type serviceType, string key)
    {
        return _container.GetInstance(serviceType, key);
    }

    public object GetInstance(Type serviceType)
    {
        return _container.GetInstance(serviceType);
    }

    public object GetService(Type serviceType)
    {
        return _container.GetInstance(serviceType);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;User entity implements Rhino.Security.IUser interface&lt;/h2&gt;

&lt;p&gt;In our domain model we commonly have entity which represents the actual user. Rhino.Security must know which entity is the user entity in order to work. So our User entity must implement Rhino.Security.IUser interface, more precisely only SecurityInfo property from the interface must be implemented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class User : Rhino.Security.IUser
{
    public virtual int Id { get; protected set; }       
    public virtual string Username { get; set; }
    public virtual string PasswordHashed { get; set; }

    public Rhino.Security.SecurityInfo SecurityInfo
    {
        get
        {
            return new Rhino.Security.SecurityInfo(Username, Id);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Preparing the database schema&lt;/h2&gt;

&lt;p&gt;Schema files can be found in the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.sql.sql"&gt;SQL dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.cs"&gt;Fluent Migrator schema&lt;/a&gt; (&lt;a href="http://bojanv91.github.io/2014/12/database-development-guidance/"&gt;blogpost about how to use Fluent Migrator&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-02.png" alt="Rhino database schema" /&gt;&lt;/p&gt;

&lt;h2&gt;Usage DEMO&lt;/h2&gt;

&lt;p&gt;The full code sample can be found in following github repository: &lt;a href="https://github.com/bojanv91/RhinoSecurityWithStructureMap"&gt;https://github.com/bojanv91/RhinoSecurityWithStructureMap&lt;/a&gt;. Here I provide excerpt code snippets from the actual test code.&lt;/p&gt;

&lt;p&gt;Setting up user groups, operations and permissions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var _authorizationRepository = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationRepository&amp;gt;();
var _authorizationService = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationService&amp;gt;();
var _permissionsBuilderService = ServiceLocator.Current.GetInstance&amp;lt;IPermissionsBuilderService&amp;gt;();
var _permissionService = ServiceLocator.Current.GetInstance&amp;lt;IPermissionsService&amp;gt;();

using (var transaction = _session.BeginTransaction())
{
    //creating user group 'Admin'
    _authorizationRepository.CreateUsersGroup("Admin");

    //creating operations
    _authorizationRepository.CreateOperation("/Content");
    _authorizationRepository.CreateOperation("/Content/Create");
    _authorizationRepository.CreateOperation("/Content/View");
    _authorizationRepository.CreateOperation("/Content/Delete");

    transaction.Commit();
}

using (var transaction = _session.BeginTransaction())
{
    //adding the LoggedInUser to the 'Admin' users group
    _authorizationRepository.AssociateUserWith(_loggedInUser, "Admin");

    //Building 'Allow' permissions for the LoggedInUser, 
    //by default if not defined as allowed, the operation is denied
    //For the sake of this example, we say the the users that are in 'Admin' users group can
    //create and view content, but cannot delete content. 
    _permissionsBuilderService.Allow("/Content/Create").For("Admin").OnEverything().DefaultLevel().Save();
    _permissionsBuilderService.Allow("/Content/View").For("Admin").OnEverything().DefaultLevel().Save();

    //We can explicitly define 'Deny' permission, but as the default behaviour denies everything 
    //that is not defined as 'Allow', I am not going to define it. You don't trust me? 
    //That's why we have tests ;) 
    //_permissionsBuilderService.Deny("/Content/Delete").For("Admin").OnEverything().DefaultLevel().Save();

    transaction.Commit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test code demonstrating the usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RhinoTests : IUseFixture&amp;lt;TestFixture&amp;gt;
{
    private readonly IAuthorizationService _authorizationService;
    private readonly User _loggedInUser;

    public RhinoTests() 
    {
        _authorizationService = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationService&amp;gt;();
        _loggedInUser = TestFixture._loggedInUser;
    }

    [Fact]
    public void it_should_allow_content_creation()
    {
        bool result = _authorizationService.IsAllowed(_loggedInUser, "/Content/Create");
        Assert.True(result);
    }

    [Fact]
    public void it_should_allow_content_viewing()
    {
        bool result = _authorizationService.IsAllowed(_loggedInUser, "/Content/View");
        Assert.True(result);
    }

    [Fact]
    public void it_should_deny_content_deletition()
    {
        bool result = _authorizationService.IsAllowed(_loggedInUser, "/Content/Delete");
        Assert.False(result);
    }

    public void SetFixture(TestFixture data) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Happy coding folks! Having questions or concerns? Shoot me a tweet -&gt; @bojanv91&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://bojanv91.github.io/2014/12/database-development-guidance/</guid><link>http://bojanv91.github.io/2014/12/database-development-guidance/</link><title>Database Development Guide for .NET dev teams with Fluent Migrator</title><description>&lt;p&gt;I have been thinking a lot lately about how properly and simply to implement database versioning strategy. These years I've experienced working with different types of database setup and furthermore researched and analyzed some more approaches and tools regarding this topic. In this posting I write about my findings and why I like Fluent Migrator as a help tool in order to get the job done. But first, let's talk about the &lt;em&gt;goals&lt;/em&gt; we try to achieve. </description><pubDate>Thu, 11 Dec 2014 23:00:00 Z</pubDate><a10:updated>2014-12-11T23:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I have been thinking a lot lately about how properly and simply to implement database versioning strategy. These years I've experienced working with different types of database setup and furthermore researched and analyzed some more approaches and tools regarding this topic. In this posting I write about my findings and why I like Fluent Migrator as a help tool in order to get the job done. But first, let's talk about the &lt;em&gt;goals&lt;/em&gt; we try to achieve. &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1&gt;Goals&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Auditing schema changes&lt;/li&gt;
&lt;li&gt;Auditing test data changes&lt;/li&gt;
&lt;li&gt;Keeping schema and test data integrity across machines&lt;/li&gt;
&lt;li&gt;Versioning via source version control systems&lt;/li&gt;
&lt;li&gt;DB-provider agnostic migration (MSSQL, PostgreSql, MySql, Oracle)&lt;/li&gt;
&lt;li&gt;Simple and automated migration strategy (local and in production)&lt;/li&gt;
&lt;li&gt;New developers on project should not sweat while making the database work on their machines, neither the CI server   &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links to &lt;a href="https://github.com/schambers/fluentmigrator/wiki"&gt;Fluent Migrator&lt;/a&gt; and &lt;a href="https://github.com/bojanv91/DatabaseMigrationsExample"&gt;this guide's project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end - all you just need to do is run MSBuildMigrator.Migrate.bat file and watch your database being deployed, upgraded, downgraded...it will figure out ;) .&lt;/p&gt;

&lt;h1&gt;Step by step guide&lt;/h1&gt;

&lt;h2&gt;1. Open Visual Studio and create New Class Library Project&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img01.png" alt="Open Visual Studio and create New Class Library Project" /&gt; &lt;/p&gt;

&lt;h2&gt;2. Install-Package FluentMigrator&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img02.png" alt="Install-Package FluentMigrator" /&gt;&lt;/p&gt;

&lt;h2&gt;3. Create new folder "Migrations" to project - here we are going to store migration files&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img03.png" alt="Create new folder &amp;quot;Migrations&amp;quot; to project - here we are going to store migration files" /&gt;&lt;/p&gt;

&lt;h2&gt;4. Now, let's create database tables with migration files&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[FluentMigrator.Migration(0)]
public class Baseline : FluentMigrator.Migration
{
    public override void Up()
    {
        Create.Table("Category")
            .WithColumn("Id").AsGuid().NotNullable().PrimaryKey()
            .WithColumn("Name").AsString(255);

        Create.Table("Product")
            .WithColumn("Id").AsGuid().NotNullable().PrimaryKey()
            .WithColumn("CategoryId").AsGuid().ForeignKey("Category", "Id")
            .WithColumn("Name").AsString(255)
            .WithColumn("Price").AsDecimal();
    }

    public override void Down()
    {
        Delete.Table("Product");
        Delete.Table("Category");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is all what is needed. In essence a migration is a class which drives from &lt;strong&gt;Migration abstract class&lt;/strong&gt;  and implements &lt;strong&gt;'Up'&lt;/strong&gt; and &lt;strong&gt;'Down'&lt;/strong&gt; methods. Additionally you will also need to define &lt;strong&gt;Migration Attribute&lt;/strong&gt; with unique identifier in order the migration runner to know the order of migration files. I like it how FM API is designed, it really follows the SQL language and how I would write this script in plain SQL.
Read further &lt;a href="https://github.com/schambers/fluentmigrator/wiki/Migration"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just for providing more examples I have added one more migration file for adding one more column to Product table for storing image URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Migration(201411131100)]
public class M201411131100_Product_added_column_for_storing_image_url : Migration
{
    public override void Up()
    {
        Alter.Table("Product")
            .AddColumn("ImageUrl").AsString(255);
    }

    public override void Down()
    {
        Delete.Column("ImageUrl").FromTable("Product");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this is how everything looks in my solution.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next, let's initialize the database with our script. &lt;/p&gt;

&lt;h2&gt;5. Creating Migration Runner (MSBuild), Migrator (.BAT) and ConnectionStrings (.CONFIG)&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img05.png" alt="" /&gt;&lt;/p&gt;

&lt;h3&gt;1. MSBuildMigrationRunner.proj&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;?xml version="1.0"?&amp;gt;
    &amp;lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Migrate"&amp;gt;
        &amp;lt;PropertyGroup&amp;gt;
            &amp;lt;DatabaseProvider&amp;gt;&amp;lt;/DatabaseProvider&amp;gt;
            &amp;lt;ConnectionStringConfigPath&amp;gt;&amp;lt;/ConnectionStringConfigPath&amp;gt;
            &amp;lt;ConnectionStringName&amp;gt;&amp;lt;/ConnectionStringName&amp;gt;
            &amp;lt;DataMigrationProjectName&amp;gt;DatabaseMigrationsExample&amp;lt;/DataMigrationProjectName&amp;gt;
            &amp;lt;DataMigrationProjectRootPath&amp;gt;$(MSBuildProjectDirectory)&amp;lt;/DataMigrationProjectRootPath&amp;gt;
            &amp;lt;MigratorTasksDirectory&amp;gt;&amp;lt;/MigratorTasksDirectory&amp;gt;

            &amp;lt;DataMigrationProjectBuildDLL&amp;gt;$(DataMigrationProjectRootPath)\bin\Debug\$(DataMigrationProjectName).dll&amp;lt;/DataMigrationProjectBuildDLL&amp;gt;
            &amp;lt;DataMigrationProjectCsproj&amp;gt;$(DataMigrationProjectRootPath)\$(DataMigrationProjectName).csproj&amp;lt;/DataMigrationProjectCsproj&amp;gt;
        &amp;lt;/PropertyGroup&amp;gt;

        &amp;lt;UsingTask TaskName="FluentMigrator.MSBuild.Migrate" AssemblyFile="$(MigratorTasksDirectory)FluentMigrator.MSBuild.dll"/&amp;gt;

        &amp;lt;Target Name="Build"&amp;gt;
            &amp;lt;MSBuild Projects="$(DataMigrationProjectCsproj)" Properties="Configuration=Debug"/&amp;gt;
        &amp;lt;/Target&amp;gt;

        &amp;lt;Target Name="Migrate" DependsOnTargets="Build"&amp;gt;
            &amp;lt;Message Text="Starting FluentMigrator Migration"/&amp;gt;
            &amp;lt;Migrate Database="$(DatabaseProvider)"
                     Connection="$(ConnectionStringName)"
                     ConnectionStringConfigPath="$(ConnectionStringConfigPath)"
                     Target="$(DataMigrationProjectBuildDLL)"
                     Output="True"
                     Verbose="True"&amp;gt;
            &amp;lt;/Migrate&amp;gt;
        &amp;lt;/Target&amp;gt;

        &amp;lt;Target Name="MigratePreview" DependsOnTargets="Build"&amp;gt;
            &amp;lt;Message Text="Previewing FluentMigrator Migration"/&amp;gt;
            &amp;lt;Migrate Database="$(DatabaseProvider)"
                     Connection="$(ConnectionStringName)"
                     ConnectionStringConfigPath="$(ConnectionStringConfigPath)"
                     Target="$(DataMigrationProjectBuildDLL)"
                     Output="True"
                     Verbose="True"
                     PreviewOnly="True"&amp;gt;
            &amp;lt;/Migrate&amp;gt;
        &amp;lt;/Target&amp;gt;
    &amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2. ConnectionStrings.config&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;connectionStrings&amp;gt;
            &amp;lt;clear /&amp;gt;
            &amp;lt;add name="Default" connectionString="Server=###;User ID=###;Password=###;Database=###;"/&amp;gt;
        &amp;lt;/connectionStrings&amp;gt;
    &amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3. MSBuildMigrator.Migrate.bat&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe MSBuildMigrationRunner.proj /t:Migrate /p:DatabaseProvider=SqlServer2012 /p:ConnectionStringConfigPath=ConnectionStrings.config /p:ConnectionStringName=Default /p:DataMigrationProjectName=DatabaseMigrationsExample /p:DataMigrationProjectRootPath=. /p:MigratorTasksDirectory=..\packages\FluentMigrator.1.3.1.0\tools\
    pause
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;/t:Migrate - performs Migration&lt;/li&gt;
&lt;li&gt;/t:MigratePreview - performs previewing of what would happen when migration is called&lt;/li&gt;
&lt;li&gt;/p:DatabaseProvider=? - specify your database providers name (SqlServer2012, postgres, mysql, oracle, sqlite and other can be found in FluentMigrator documentation)&lt;/li&gt;
&lt;li&gt;/p:ConnectionStringConfigPath=? - path to connection strings file&lt;/li&gt;
&lt;li&gt;/p:ConnectionStringName=? - name of the connection string to use from the configuration file&lt;/li&gt;
&lt;li&gt;/p:DataMigrationProjectName=? - Visual Studio project name where your migration files reside&lt;/li&gt;
&lt;li&gt;/p:DataMigrationProjectRootPath=? - path to where your Visual Studio migration project resides&lt;/li&gt;
&lt;li&gt;/p:MigratorTasksDirectory=? - path to FluentMigrator tools folder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Viola, this is all you need to do. For your project you will need to put the connection string to your database and make changes where needed in the .BAT file, such as database provider and project name as an essential changes. Other config stuff should be pretty common, but if you have different structure than mine, you have full power and control with the flexibility provided here.&lt;/p&gt;

&lt;h2&gt;5. Run your MSBuildMigrator.Migrate.bat file&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Table VersionInfo is used for storing migration metadata.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;All of our tables are created.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In VersionInfo table you can see the "commits".&lt;/p&gt;

&lt;p&gt;&lt;img src="http://bojanv91.github.io/images/2014-12-12-database-development-guidance/img09.png" alt="" /&gt;&lt;/p&gt;

&lt;h1&gt;Rules of Thumb&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;First migration is always called "BaseLine" with migration ID: 0. Everything starts from there.&lt;/li&gt;
&lt;li&gt;Migration unique identification number is composed of current datetime when the migration is being created in format #yyyyMMddhhmm#&lt;br /&gt;
(example: now is 2014-11-13 10:15, so migration ID would be 201411131015)&lt;/li&gt;
&lt;li&gt;Migration filename should explain what is being changed - just like how you would write a commit message - in format 'M#yyyyMMddhhmm#_Message.cs'&lt;br /&gt;
(example: M201411131015_created_all_initial_tables)&lt;/li&gt;
&lt;li&gt;Class name should follow the exact convention like the filename&lt;br /&gt;
(example: class M201411131015_created_all_initial_tables { .. }&lt;/li&gt;
&lt;li&gt;MSBuildMigrationRunner.proj, ConnectionStrings.config, MSBuildMigrator.Migrate.bat are stored in Migration project root folder&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Happy coding folks! Having questions or concerns? Shoot me a tweet -&gt; @bojanv91&lt;/p&gt;
</a10:content></item></channel></rss>